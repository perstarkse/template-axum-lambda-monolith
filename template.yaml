AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  template-api

  SAM Template for a API written in rust using Axum.

Globals:
  Function:
    Timeout: 30
    MemorySize: 128

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
          
  TemplateApiFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
    Properties:
      CodeUri: ./
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          ENVIRONMENT: production
          TEST_TABLE_NAME: !Ref TemplateTable
          AUTH_METHOD: SECRET
          SECRET: Secret
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TemplateTable

  TemplateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: template-table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  
  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: lucia-sessions-table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      GlobalSecondaryIndexes:
        - IndexName: lucia-sessions-user-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  OauthAccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: lucia-oauth-accounts-table
      AttributeDefinitions:
        - AttributeName: provider_id
          AttributeType: S
        - AttributeName: provider_user_id
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: provider_id
          KeyType: HASH
        - AttributeName: provider_user_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: lucia-oauth-user-index
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: lucia-user-table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: lucia-user-email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

Outputs:
  TemplateApi:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  TemplateApiFunction:
    Description: "API Lambda Function ARN"
    Value: !GetAtt TemplateApiFunction.Arn
  TemplateApiFunctionIamRole:
    Description: "Implicit IAM Role created for API function"
    Value: !GetAtt TemplateApiFunctionRole.Arn
  TemplateTableName:
    Description: "Name of the DynamoDB table"
    Value: !Ref TemplateTable
  SessionTableName:
    Description: "Name of the DynamoDB Sessions table"
    Value: !Ref SessionTable
  OauthAccountTable:
    Description: "Name of the DynamoDB OAuthAccounts table"
    Value: !Ref OauthAccountTable
